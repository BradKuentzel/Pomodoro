{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\19418\\\\Desktop\\\\Thinkful\\\\projects\\\\Project_Pomodoro_Timer_Qualified_1\\\\src\\\\Timer.js\";\nimport React from \"react\";\nimport { minutesToDuration } from \"./utils/duration\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Timer({\n  status,\n  setStatus,\n  countdown,\n  setCountdown,\n  focus,\n  breakTime,\n  isTimerRunning,\n  clockStop\n}) {\n  const clock = status === \"Focusing\" ? focus : breakTime;\n  const percentage = (clock * 60 - countdown) / (clock * 60) * 100; //if (!clockStop) {\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row mb-2\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          \"data-testid\": \"session-title\",\n          children: [\" \", status, \" for \", minutesToDuration(clock), \" minutes\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"lead\",\n          \"data-testid\": \"session-sub-title\",\n          children: [countdown, \" remaining\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row mb-2\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"progress\",\n          style: {\n            height: \"20px\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"progress-bar\",\n            role: \"progressbar\",\n            \"aria-valuemin\": \"0\",\n            \"aria-valuemax\": \"100\",\n            \"aria-valuenow\": percentage // TODO: Increase aria-valuenow as elapsed time increases\n            ,\n            style: {\n              width: `${percentage}%`\n            } // TODO: Increase width % as elapsed time increases\n\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n}\n_c = Timer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Timer\");","map":{"version":3,"sources":["C:/Users/19418/Desktop/Thinkful/projects/Project_Pomodoro_Timer_Qualified_1/src/Timer.js"],"names":["React","minutesToDuration","Timer","status","setStatus","countdown","setCountdown","focus","breakTime","isTimerRunning","clockStop","clock","percentage","height","width"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,iBAAR,QAAgC,kBAAhC;;AAEA,eAAe,SAASC,KAAT,CAAe;AAC5BC,EAAAA,MAD4B;AAE5BC,EAAAA,SAF4B;AAG5BC,EAAAA,SAH4B;AAI5BC,EAAAA,YAJ4B;AAK5BC,EAAAA,KAL4B;AAM5BC,EAAAA,SAN4B;AAO5BC,EAAAA,cAP4B;AAQ5BC,EAAAA;AAR4B,CAAf,EASZ;AAEH,QAAMC,KAAK,GAAGR,MAAM,KAAK,UAAX,GAAwBI,KAAxB,GAAgCC,SAA9C;AAEA,QAAMI,UAAU,GACX,CAACD,KAAK,GAAG,EAAR,GAAaN,SAAd,KAA4BM,KAAK,GAAG,EAApC,CAAD,GAA4C,GADhD,CAJG,CAMD;;AACA,sBAEE;AAAA,4BAEI;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA,gCAEE;AAAI,yBAAY,eAAhB;AAAA,0BAAkCR,MAAlC,WAA+CF,iBAAiB,CAACU,KAAD,CAAhE;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF,eAIE;AAAG,UAAA,SAAS,EAAC,MAAb;AAAoB,yBAAY,mBAAhC;AAAA,qBACGN,SADH;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAFJ,eAYI;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA,+BACE;AAAK,UAAA,SAAS,EAAC,UAAf;AAA0B,UAAA,KAAK,EAAE;AAAEQ,YAAAA,MAAM,EAAE;AAAV,WAAjC;AAAA,iCACE;AACE,YAAA,SAAS,EAAC,cADZ;AAEE,YAAA,IAAI,EAAC,aAFP;AAGE,6BAAc,GAHhB;AAIE,6BAAc,KAJhB;AAKE,6BAAeD,UALjB,CAK6B;AAL7B;AAME,YAAA,KAAK,EAAE;AAAEE,cAAAA,KAAK,EAAG,GAAEF,UAAW;AAAvB,aANT,CAMsC;;AANtC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAZJ;AAAA;AAAA;AAAA;AAAA;AAAA,UAFF;AA8BD;KA9CuBV,K","sourcesContent":["import React from \"react\";\nimport {minutesToDuration} from \"./utils/duration\"\n\nexport default function Timer({\n  status,\n  setStatus, \n  countdown, \n  setCountdown, \n  focus, \n  breakTime, \n  isTimerRunning,\n  clockStop\n}) {\n  \nconst clock = status === \"Focusing\" ? focus : breakTime; \n \nconst percentage =\n    ((clock * 60 - countdown) / (clock * 60)) * 100\n  //if (!clockStop) {\n  return (\n    \n    <div>\n        {/* TODO: This area should show only when a focus or break session is running or pauses */}\n        <div className=\"row mb-2\">\n          <div className=\"col\">\n            {/* TODO: Update message below to include current session (Focusing or On Break) and total duration */}\n            <h2 data-testid=\"session-title\"> {status} for {minutesToDuration(clock)} minutes</h2>\n            {/* TODO: Update message below to include time remaining in the current session */}\n            <p className=\"lead\" data-testid=\"session-sub-title\">\n              {countdown} remaining\n            </p>\n          </div>\n        </div>\n        <div className=\"row mb-2\">\n          <div className=\"col\">\n            <div className=\"progress\" style={{ height: \"20px\" }}>\n              <div\n                className=\"progress-bar\"\n                role=\"progressbar\"\n                aria-valuemin=\"0\"\n                aria-valuemax=\"100\"\n                aria-valuenow={percentage} // TODO: Increase aria-valuenow as elapsed time increases\n                style={{ width: `${percentage}%` }} // TODO: Increase width % as elapsed time increases\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n  )\n}"]},"metadata":{},"sourceType":"module"}